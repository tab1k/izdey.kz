from datetime import timezone
from django.db.models import Exists, OuterRef
from django.contrib import messages
from django.core.paginator import Paginator
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect
from django.urls import reverse
from django.utils import timezone
from django.views.generic import ListView, CreateView, View, TemplateView
from notifications.mixins import UnreadNotificationMixin
from resume.models import Resume
from users.models import UserProfile
from .filters import JobFilter
from django.http import JsonResponse
from django.template.loader import render_to_string
from django.views.generic.detail import DetailView
from favorites.mixins import *
from django.core.cache import cache
from .forms import *
from django.core.exceptions import ValidationError, PermissionDenied, ObjectDoesNotExist
from django.contrib.auth import get_user_model
from django.http import JsonResponse
from django.views.generic import ListView
from django.shortcuts import render
from .models import JobResponse


class BaseLocation:

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['location_choices'] = UserProfile.LOCATION_CHOICES
        return context




class HomePageView(FavoritesCountMixin, UnreadNotificationMixin, ListView):
    model = Job
    template_name = 'jobs/index.html'
    paginate_by = 10
    context_object_name = 'jobs'
    ordering = ('-date_posted',)
    filterset_class = JobFilter

    def get_queryset(self):
        queryset = super().get_queryset().filter(is_active=True).select_related('employer')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ JobFilter (location, title, category –∏ –æ–ø–ª–∞—Ç–∞)
        filterset = self.filterset_class(self.request.GET, queryset=queryset)
        if filterset.is_valid():
            queryset = filterset.qs  # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π queryset

        # üìå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        if not self.request.GET.get('location'):  # –ï—Å–ª–∏ –≤ GET-–∑–∞–ø—Ä–æ—Å–µ –Ω–µ—Ç 'location'
            if self.request.user.is_authenticated and hasattr(self.request.user,
                                                              'profile') and self.request.user.profile.location:
                queryset = queryset.filter(location=self.request.user.profile.location)

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É "–∏–∑–±—Ä–∞–Ω–Ω—ã—Ö" –≤–∞–∫–∞–Ω—Å–∏–π
        if self.request.user.is_authenticated:
            favorite_subquery = Favorite.objects.filter(user=self.request.user, job=OuterRef('pk'))
            queryset = queryset.annotate(is_favorite=Exists(favorite_subquery))

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'unread_count': self.get_unread_notification_count(),
            'location_choices': Job.LOCATION_CHOICES,
            'filter': self.filterset_class(self.request.GET, queryset=self.get_queryset()),
        })
        return context



    def get_cache_key(self):
        """Generate a unique cache key based on request parameters."""
        location_filter = self.request.GET.get('location', 'all')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if self.request.user.is_authenticated:
            user_profile = getattr(self.request.user, 'profile', None)
            user_profile_location = getattr(user_profile, 'location', 'unknown') if user_profile else 'unknown'
        else:
            user_profile_location = 'unknown'

        return f'jobs_queryset_{location_filter}_{user_profile_location}'


class JobDetailView(FavoritesCountMixin, UnreadNotificationMixin, DetailView):
    model = Job
    context_object_name = 'job'
    template_name = 'jobs/job_detail.html'

    def get_queryset(self):
        queryset = super().get_queryset()
        queryset = queryset.select_related('employer')
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        job = self.get_object()

        if self.request.user.is_authenticated:
            context['is_favorited'] = self.request.user.favorites.filter(job=job).exists()
            context['has_applied'] = job.user_has_applied(self.request.user)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            application_status = JobResponse.objects.filter(
                job=job,
                user=self.request.user
            ).first()

            if application_status:
                context['application_status'] = application_status.status
            else:
                context['application_status'] = None
        else:
            context['is_favorited'] = False
            context['has_applied'] = False
            context['application_status'] = None

        context['job_url'] = self.request.build_absolute_uri()
        context['location_choices'] = UserProfile.LOCATION_CHOICES
        context['keys_description_items'] = job.keys_description.split('\n')
        context['skills_description_items'] = job.skills_description.split('\n')

        # –ü–æ–¥–±–æ—Ä–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        similar_jobs = Job.objects.filter(
            category=job.category,
            location=job.location
        ).exclude(id=job.id)
        context['similar_jobs'] = similar_jobs

        return context


class SendApplicationView(LoginRequiredMixin, View):
    def post(self, request, pk, *args, **kwargs):
        job = get_object_or_404(Job, pk=pk)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—é–º–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not Resume.objects.filter(user_profile__user=request.user).exists():
            messages.error(request, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏.")
            return redirect('myaccount:resume:resume_create')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
        if JobResponse.objects.filter(user=request.user, job=job).exists():
            messages.error(request, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.")
            return redirect('jobs:service-detail', pk=pk)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
        JobResponse.objects.create(
            user=request.user,
            job=job,
            message="–í–∞—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞",
        )
        messages.success(request, "–í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return redirect('jobs:service-detail', pk=pk)


class ApproveJobResponseView(LoginRequiredMixin, View):
    def post(self, request, pk, response_id, *args, **kwargs):
        response = get_object_or_404(JobResponse, id=response_id, job__pk=pk)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        if response.job.employer != request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π
        response.status = 'approved'
        response.save()
        messages.success(request, "–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω.")
        return redirect('myaccount:responses')


class RejectJobResponseView(LoginRequiredMixin, View):
    def post(self, request, pk, response_id, *args, **kwargs):
        response = get_object_or_404(JobResponse, id=response_id, job__pk=pk)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        if response.job.employer != request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
        response.status = 'rejected'
        response.save()
        messages.success(request, "–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        return redirect('myaccount:responses')


class Error404View(TemplateView, FavoritesCountMixin, UnreadNotificationMixin, ):
    template_name = 'error404.html'


class AddToFavoritesView(LoginRequiredMixin, View):
    def post(self, request, job_id):
        job = get_object_or_404(Job, pk=job_id)
        favorite = Favorite.objects.filter(user=request.user, job=job).first()

        if favorite:
            favorite.delete()
            return JsonResponse({"status": "removed"})
        else:
            Favorite.objects.create(user=request.user, job=job)
            return JsonResponse({"status": "added"})


class RemoveFromFavoritesView(View):
    def post(self, request, job_id):
        favorite = get_object_or_404(Favorite, job_id=job_id, user=request.user)
        favorite.delete()
        return redirect('favorites:favorites-list')




class CategoryListView(BaseLocation, FavoritesCountMixin, UnreadNotificationMixin, ListView):
    model = Category
    template_name = 'jobs/impact/category_list.html'
    context_object_name = 'categories'

    def get_queryset(self):
        queryset = Category.objects.all().order_by('name')

        search_form = CategorySearchForm(self.request.GET or None)
        if search_form.is_valid():
            query = search_form.cleaned_data.get('query')
            if query:
                queryset = queryset.filter(name__icontains=query)

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        search_form = CategorySearchForm(self.request.GET or None)
        context['search_form'] = search_form
        return context

    def render_to_response(self, context, **response_kwargs):
        # –ï—Å–ª–∏ —ç—Ç–æ AJAX-–∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':
            html = render(self.request, 'jobs/impact/category_list.html', context).content.decode('utf-8')
            return JsonResponse({'html': html})

        return super().render_to_response(context, **response_kwargs)


class CategoryDetailView(BaseLocation, LoginRequiredMixin, FavoritesCountMixin, UnreadNotificationMixin, DetailView):
    model = Category
    template_name = 'jobs/impact/category_detail.html'
    context_object_name = 'category'
    paginate_by = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = self.get_object()

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_location = getattr(self.request.user.profile, 'location', None)

        # –ë–∞–∑–æ–≤—ã–π queryset –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        jobs = Job.objects.filter(category=category, is_active=True)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_location:
            jobs = jobs.filter(location=user_location)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä JobFilter
        filter = JobFilter(self.request.GET, queryset=jobs)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
        paginator = Paginator(filter.qs, self.paginate_by)  # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 10 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_number = self.request.GET.get('page')
        page_obj = paginator.get_page(page_number)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ñ–∏–ª—å—Ç—Ä –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['jobs'] = page_obj
        context['filter'] = filter
        context['paginator'] = paginator
        context['page_obj'] = page_obj

        return context


class VacancyListView(FavoritesCountMixin, UnreadNotificationMixin, BaseLocation, ListView):
    model = Job
    template_name = 'jobs/impact/vacancy_list.html'
    paginate_by = 10
    context_object_name = 'jobs'
    ordering = ('-date_posted',)
    filterset_class = JobFilter

    def get_queryset(self):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π queryset
        queryset = super().get_queryset().filter(is_active=True).select_related('employer')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        self.filterset = self.filterset_class(self.request.GET, queryset=queryset)
        queryset = self.filterset.qs

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–ª–Ω–æ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        queryset = queryset.filter(time_count='full')

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.request.user.is_authenticated:
            user_profile = getattr(self.request.user, 'profile', None)
            user_profile_location = getattr(user_profile, 'location', 'unknown') if user_profile else 'unknown'
        else:
            user_profile_location = 'unknown'

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_profile_location != 'unknown':
            queryset = queryset.filter(location=user_profile_location)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        queryset = queryset.order_by('time_count', '-date_posted')

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–æ—Ä–º—ã —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['filter'] = self.filterset
        return context

    def get_cache_key(self):
        """Generate a unique cache key based on request parameters."""
        location_filter = self.request.GET.get('location', 'all')

        if self.request.user.is_authenticated:
            user_profile = getattr(self.request.user, 'profile', None)
            user_profile_location = getattr(user_profile, 'location', 'unknown') if user_profile else 'unknown'
        else:
            user_profile_location = 'unknown'

        return f'jobs_queryset_{location_filter}_{user_profile_location}'


class ServiceListView(FavoritesCountMixin, UnreadNotificationMixin, BaseLocation, ListView):
    model = Job
    template_name = 'jobs/impact/service_list.html'
    paginate_by = 10
    context_object_name = 'services'
    filterset_class = JobFilter

    def get_queryset(self):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π queryset
        queryset = super().get_queryset().filter(is_active=True).select_related('employer', 'category')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        self.filterset = self.filterset_class(self.request.GET, queryset=queryset)
        queryset = self.filterset.qs

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (—É—Å–ª—É–≥–∏)
        queryset = queryset.filter(time_count__in=['part', 'daily'])

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.request.user.is_authenticated:
            user_profile = getattr(self.request.user, 'profile', None)
            user_profile_location = getattr(user_profile, 'location', 'unknown') if user_profile else 'unknown'
        else:
            user_profile_location = 'unknown'

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_profile_location != 'unknown':
            queryset = queryset.filter(location=user_profile_location)

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        queryset = queryset.order_by('-date_posted')

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–æ—Ä–º—ã —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['filter'] = self.filterset
        return context

    def get_cache_key(self):
        """Generate a unique cache key based on request parameters."""
        location_filter = self.request.GET.get('location', 'all')

        if self.request.user.is_authenticated:
            user_profile = getattr(self.request.user, 'profile', None)
            user_profile_location = getattr(user_profile, 'location', 'unknown') if user_profile else 'unknown'
        else:
            user_profile_location = 'unknown'

        return f'services_queryset_{location_filter}_{user_profile_location}'


class CreateServiceView(LoginRequiredMixin, BaseLocation, FavoritesCountMixin, UnreadNotificationMixin, CreateView):
    model = Job
    template_name = 'jobs/create/service_create.html'
    form_class = CreateServiceForm

    def form_valid(self, form):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—ã
        form.instance.employer = self.request.user

        try:
            response = super().form_valid(form)
        except ValidationError as e:
            form.add_error(None, str(e))
            return self.form_invalid(form)

        return redirect('jobs:service-detail', pk=form.instance.pk)

    def get_success_url(self):
        return reverse('jobs:service-detail', kwargs={'pk': self.object.pk})


User = get_user_model()


class CreateVacancyView(LoginRequiredMixin, FavoritesCountMixin, UnreadNotificationMixin, CreateView):
    model = Job
    template_name = 'jobs/create/vacancy_create.html'
    form_class = CreateVacancyForm

    def dispatch(self, request, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_profile = self.request.user.profile  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not user_profile.company_profile:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–ø–∞–Ω–∏–∏
                messages.error(self.request, "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.")
                return redirect('jobs:home')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        except ObjectDoesNotExist:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω (RelatedObjectDoesNotExist)
            messages.error(self.request, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
            return redirect('jobs:home')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—ã
        form.instance.employer = self.request.user

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–µ–π date –∏ time, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if form.instance.date is None:
            form.instance.date = timezone.now().date()
        if form.instance.time is None:
            form.instance.time = timezone.now().time()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è time_count, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if not form.instance.time_count:
            form.instance.time_count = 'full'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        try:
            user_profile = self.request.user.profile
            if not user_profile.company_profile:
                form.add_error(None, "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏.")
                return self.form_invalid(form)
        except User.profile.RelatedObjectDoesNotExist:
            form.add_error(None, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return self.form_invalid(form)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–∞ 'full'
        if form.instance.time_count == 'full':
            today = timezone.now().date()
            daily_jobs_count = Job.objects.filter(
                employer=self.request.user,
                time_count='full',
                date_posted__date=today
            ).count()
            if daily_jobs_count >= 5:
                form.add_error(None, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π —Ç–∏–ø–∞ '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å' –≤ –¥–µ–Ω—å.")
                return self.form_invalid(form)

        return super().form_valid(form)

    def get_success_url(self):
        return reverse('jobs:vacancy-detail', kwargs={'pk': self.object.pk})
